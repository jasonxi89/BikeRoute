'use strict';
 
 
console.log("Loading function");
 
//Loading the Databasebase api code
var doc =  require('dynamodb-doc');
var db = new  doc.DynamoDB();
console.log("loaded DynamoDB");
 
 
 
//This is the MAIN function that is called by Lambda system,  passing event and context
// see above for expected event data attributes that will be  processed below to use as data want to enter into our bikers table        
exports.handler = function(event, context, callback) {   
    
    //************NEW  CODE to process the request data (and start setting up response)*************
    var responseCode =  200;
    var requestBody,  pathParams, queryStringParams, headerParams, stage, stageVariables,  cognitoIdentityId, httpMethod, sourceIp, userAgent, requestId,  resourcePath;
    console.log("request: " + JSON.stringify(event));
 
    // Request Body
    requestBody =  event.body;
    if (requestBody  !== undefined && requestBody !== null) {               
        // Set  'test-status' field in the request to test sending a specific response status  code (e.g., 503)
        responseCode =  JSON.parse(requestBody)['test-status'];
    }
    
    var bodyJSON = JSON.parse(event.body);
 
    // Path Parameters
    pathParams =  event.path;
                
    // Query String  Parameters
    queryStringParams  = event.queryStringParameters;
                
    // Header  Parameters
    headerParams =  event.headers;
 
    if  (event.requestContext !== null && event.requestContext !== undefined) {               
        var  requestContext = event.requestContext;              
        // API Gateway  Stage
        stage =  requestContext.stage;
       // Unique  Request ID
        requestId =  requestContext.requestId;
                
        // Resource  Path
        resourcePath =  requestContext.resourcePath;
        var identity =  requestContext.identity;
                
        // Amazon  Cognito User Identity
         cognitoIdentityId = identity.cognitoIdentityId;                
        // Source IP
        sourceIp =  identity.sourceIp;               
        // User-Agent
        userAgent =  identity.userAgent;
    }
 
    // API Gateway  Stage Variables
    stageVariables =  event.stageVariables;
                
    // HTTP Method  (e.g., POST, GET, HEAD)
    httpMethod =  event.httpMethod;
                
 
    //********************************************************************************
   // CODE TO PROCESS input request data TO ENTER  in new USER to Biker DyanmoDB table
    
    var userID = bodyJSON.userId;
    
        var params = {
			TableName: "bikerroute-mobilehub-1014875679-routes",
			IndexName: "Popular",
			KeyConditionExpression: 'userId = :userId',
			ExpressionAttributeValues: {
			    ":userId" : userID
			},
			Limit: 10,
			ScanIndexForward: false,
			ProjectionExpression: "#N, routeId, start_latitude, start_longitude, end_latitude, end_longitude, number_traveled",
			ExpressionAttributeNames: {
					"#N" : "routeName" 
			},
			"ReturnConsumedCapacity": "TOTAL"
		}

		console.log("Scanning ROUTES table.");
		db.query(params, onQuery);

		function onQuery(err, data) {
				if (err) {
						console.error("Unable to scan the table. Error JSON:", JSON.stringify(err, null, 2));
				} else {
						// print all the movies
						console.log("Scan succeeded.");
						 console.log(JSON.stringify(data, null, 2));
						 var responseBody = {
                            requestBody : requestBody,
                            pathParams : pathParams,
                            queryStringParams : queryStringParams,
                            headerParams : headerParams,
                            stage : stage,
                            stageVariables : stageVariables,
                            cognitoIdentityId : cognitoIdentityId,
                            httpMethod : httpMethod,
                            sourceIp : sourceIp,
                            userAgent : userAgent,
                            requestId : requestId,
                            resourcePath : resourcePath,
                            userId: userID,
                            listOfTop10: data
                        };
                        
                         var response = {
                            statusCode: responseCode,
                            headers: {
                                "x-custom-header" : "custom header value"
                            },
                            body: JSON.stringify(responseBody)
                        };
                        console.log("response: " + JSON.stringify(response))
                        context.succeed(response);
                        callback(JSON.stringify(response));
				}
		}
	};//end of handler
